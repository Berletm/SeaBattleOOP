@startuml
class "std::__detail::_Node_iterator<std::pair<std::string const,std::function<std::unique_ptr<AbilityInterface,std::default_delete<AbilityInterface>>(Player &,Player &)>>,__constant_iterators::value,__hash_cached::value>" as C_0004449643540916957189
class C_0004449643540916957189 {
__
}
class "std::string" as C_0001275076681856179721
class C_0001275076681856179721 {
__
}
class "std::unique_ptr<AbilityInterface>" as C_0001603642456660510360
class C_0001603642456660510360 {
__
}
class "std::function<std::unique_ptr<AbilityInterface>(Player &,Player &)>" as C_0007473334849562948175
class C_0007473334849562948175 {
__
}
class "std::unordered_map<std::string,std::function<std::unique_ptr<AbilityInterface>(Player &,Player &)>>" as C_0011220702600279671166
class C_0011220702600279671166 {
__
}
class "std::char_traits<char>" as C_0005535748063705580822
class C_0005535748063705580822 {
__
}
class "std::allocator<char>" as C_0002987924748245695187
class C_0002987924748245695187 {
__
}
class "std::string" as C_0010957948077403816313
class C_0010957948077403816313 {
__
}
class "std::default_delete<AbilityInterface>" as C_0009005584129432802063
class C_0009005584129432802063 {
__
}
class "std::unique_ptr<AbilityInterface,std::default_delete<AbilityInterface>>" as C_0000030218166798540365
class C_0000030218166798540365 {
__
}
class "std::function<std::unique_ptr<AbilityInterface,std::default_delete<AbilityInterface>>(Player &,Player &)>" as C_0006940668744115959276
class C_0006940668744115959276 {
__
}
class "std::pair<std::string const,std::function<std::unique_ptr<AbilityInterface,std::default_delete<AbilityInterface>>(Player &,Player &)>>" as C_0007031707510986757882
class C_0007031707510986757882 {
__
}
class "std::vector<std::string>" as C_0001347152004389415025
class C_0001347152004389415025 {
__
}
class "std::vector<Ship::ShipStates>" as C_0012070552035441967676
class C_0012070552035441967676 {
__
}
class "std::vector<PlayGround::Cell>" as C_0010394947047751168916
class C_0010394947047751168916 {
__
}
class "std::vector<std::vector<PlayGround::Cell>>" as C_0015276452310838919986
class C_0015276452310838919986 {
__
}
class "std::vector<size_t>" as C_0009048762651940375792
class C_0009048762651940375792 {
__
}
class "std::vector<Ship>" as C_0010668212532447068380
class C_0010668212532447068380 {
__
}
class "std::unordered_map<char,GameInput::action>" as C_0011228600242240923690
class C_0011228600242240923690 {
__
}
class "std::basic_ifstream<char>" as C_0013346845937494941633
class C_0013346845937494941633 {
__
}
class "std::basic_ofstream<char>" as C_0004276277466396066764
class C_0004276277466396066764 {
__
}
class "std::map<ShipType,size_t>" as C_0011066545360489158062
class C_0011066545360489158062 {
__
}
class "nlohmann::basic_json" as C_0008843406913308057517
class C_0008843406913308057517 {
__
}
class "GameException" as C_0018289579989347309285
class C_0018289579989347309285 {
+GameException(const std::string & message) : void
..
+what() const noexcept : const char *
__
-message : std::string
}
class "NoAbilityException" as C_0005494508630382109428
class C_0005494508630382109428 {
+NoAbilityException(const std::string & message) : void
..
+what() const noexcept : const char *
__
-message : std::string
}
class "CollisionException" as C_0016096237383225318716
class C_0016096237383225318716 {
+CollisionException(const std::string & message) : void
..
+what() const noexcept : const char *
__
-message : std::string
}
class "OutOfFieldAttackException" as C_0006488909643758798999
class C_0006488909643758798999 {
+OutOfFieldAttackException(const std::string & message) : void
..
+what() const noexcept : const char *
__
-message : std::string
}
class "WrongShipSizeException" as C_0002765608692022154684
class C_0002765608692022154684 {
+WrongShipSizeException(const std::string & message) : void
..
+what() const noexcept : const char *
__
-message : std::string
}
class "WrongShipAmountException" as C_0006132211642022131397
class C_0006132211642022131397 {
+WrongShipAmountException(const std::string & message) : void
..
+what() const noexcept : const char *
__
-message : std::string
}
class "Point" as C_0017330203401231275776
class C_0017330203401231275776 {
+Point() : void
+Point(size_t x, size_t y) : void
__
+x : size_t
+y : size_t
}
abstract "AbilityInterface" as C_0018418403117949621286
abstract C_0018418403117949621286 {
+~AbilityInterface() = default : void
..
{abstract} +applyAbility() const = 0 : bool
__
}
class "DoubleDamage" as C_0000648866158297546465
class C_0000648866158297546465 {
+DoubleDamage(Player & user) : void
..
+applyAbility() const : bool
{static} +registerAbility() : void
__
-user : Player &
}
class "Scanner" as C_0013402225055324596433
class C_0013402225055324596433 {
+Scanner(Player & user, Player & target) : void
..
+applyAbility() const : bool
{static} +registerAbility() : void
__
-target : Player &
-user : Player &
}
class "RocketBarrage" as C_0011998025940278914008
class C_0011998025940278914008 {
+RocketBarrage(Player & user, Player & target) : void
..
+applyAbility() const : bool
{static} +registerAbility() : void
__
-target : Player &
-user : Player &
}
class "AbilityRegistry" as C_0016677220737534910727
class C_0016677220737534910727 {
-AbilityRegistry() = default : void
..
+begin() : iterator
+createAbility(const std::string & name, Player & user, Player & target) : std::unique_ptr<AbilityInterface>
+end() : iterator
{static} +instance() : AbilityRegistry &
+registerAbility(const std::string & name, AbilityCreator creator) : void
+size() : size_t
__
-abilityMap : Registry
}
class "AbilityRegistry::iterator" as C_0002165705464363680401
class C_0002165705464363680401 {
+operator!=(const iterator & other) const : bool
+operator*() const : reference
+operator+(size_t n) const : iterator
+operator++() : iterator &
+operator->() const : pointer
..
+iterator(std::__detail::_Node_iterator<std::string,AbilityCreator>::iterator start, std::__detail::_Node_iterator<std::string,AbilityCreator>::iterator end) : void
__
-current : std::unordered_map<std::string,AbilityCreator>::iterator
-end : std::unordered_map<std::string,AbilityCreator>::iterator
}
class "AbilityManager" as C_0002235219345516323367
class C_0002235219345516323367 {
+AbilityManager() : void
..
+emptyAbilityQueue() : void
+getAbility(const std::string & ability) : void
+getDoubleDamage() : void
+getRandomAbility() : void
+getRocketBarrage() : void
+getScanner() : void
+pop() : void
+to_json() : json
+top() const : const std::string
__
-avalaible_abilities : std::vector<std::string>
}
class "Ship" as C_0014529657433315016423
class C_0014529657433315016423 {
+Ship(size_t size) : void
+Ship(Point & coords, size_t size, Orientation & orientation, std::vector<ShipStates> & segments, bool status) : void
..
+changeSegmentState(size_t index) : void
+getCoords() : Point
+getOrientation() : Orientation
+getSegment(Point p) : ShipStates
+getSegment(size_t idx) : ShipStates
+getSize() const : size_t
+isDestroyed() const : bool
+printShipHP() : void
+setCoords(Point p) : void
+setOrientation(Orientation orientation) : void
+status() : bool
+to_json() const : json
__
-coords : Point
-isPlaced : bool
-orientation : Orientation
-segments : std::vector<ShipStates>
-size : size_t
}
enum "Ship::Orientation" as C_0015200704647938469073
enum C_0015200704647938469073 {
vertical
horizontal
}
enum "Ship::ShipStates" as C_0009844379697287645638
enum C_0009844379697287645638 {
destroyed_ship
damaged_ship
full_ship
}
enum "CellStates" as C_0007786281775014655181
enum C_0007786281775014655181 {
empty
unknown
ship
}
class "PlayGround" as C_0006558446222404021839
class C_0006558446222404021839 {
+PlayGround(size_t size = 8) : void
+PlayGround(const PlayGround & other) : void
+PlayGround(PlayGround && other) noexcept : void
..
+operator=(const PlayGround & other) : PlayGround &
+operator=(PlayGround && other) : PlayGround &
..
+Attack(Point p) : bool
+DisplayPlayground() : void
+DisplayPlaygroundWithOutFogOfWar() : void
+PlaceShip(Ship * ship, Point position, Ship::Orientation orientation) : void
+change_cell(Point p, Ship * ship, CellStates state, size_t segement_idx) : void
-checkCollision(Point p, Ship & ship, Ship::Orientation orientation) : bool
+getCellState(Point p) const : CellStates
+getFieldSize() const : size_t
+getShip(const Point & p) : Ship *
+isInPlayGround(Point p) const : bool
+to_json() const : json
__
-cells : std::vector<std::vector<Cell>>
-size : size_t
}
class "PlayGround::Cell" as C_0005246984515395044746
class C_0005246984515395044746 {
+Cell(CellStates state = CellStates::unknown) : void
+Cell(const Cell & other) : void
+ChangeSegmentState() : void
+ChangeState(CellStates new_state, Ship * ship_ptr = nullptr, size_t segment_idx = -1) : void
+GetSegmentHP() const : Ship::ShipStates
+GetShip() const : Ship *
+GetState() const : CellStates
+to_json() const : json
__
-segment_idx : size_t
-ship : Ship *
-state : CellStates
}
class "ShipManager" as C_0017499122254539489506
class C_0017499122254539489506 {
+ShipManager() : void
+ShipManager(size_t ship_amount, std::vector<size_t> ship_sizes) : void
+ShipManager(const ShipManager & other) : void
+ShipManager(ShipManager && other) : void
..
+operator=(const ShipManager & other) : ShipManager &
+operator=(ShipManager && other) : ShipManager &
..
+addShip(Ship ship) : void
+getCurrentShipAmount() const : size_t
+getShip() : Ship *
+getShip(Point p) : Ship *
+getShip(size_t idx) : Ship *
+getShipAmount() const : size_t
+getShipSizes() : std::vector<size_t>
+printShips() : void
+to_json() const : json
__
-ships : std::vector<Ship>
}
class "Player" as C_0003605716991605700936
class C_0003605716991605700936 {
+to_json() : json
__
+Field : PlayGround
+SManager : ShipManager
+cursor : Point
+double_damage_buff : bool
}
class "HumanPlayer" as C_0006734864703741281718
class C_0006734864703741281718 {
+applyAbility(Player & target) : void
+attack(Player & target) : void
+to_json() : json
__
+AManager : AbilityManager
}
class "GameInput" as C_0004247110065670081973
class C_0004247110065670081973 {
+operator>>(Game & game) : void
..
+ConvertStringToAction(std::string input) : action
+InputAction() : action
+InputX(size_t & x) : bool
+InputXY(Point & p) : bool
+InputXYR(Point & p, Ship::Orientation & r) : bool
__
#keybinds : std::unordered_map<char,action>
}
enum "GameInput::action" as C_0016022673017162080147
enum C_0016022673017162080147 {
CURSOR_DOWN
CURSOR_UP
CURSOR_LEFT
CURSOR_RIGHT
PRIMARY_ACTION
ROTATE
SECONDARY_ACTION
SAVE
LOAD
}
abstract "GameState" as C_0004356735495323104445
abstract C_0004356735495323104445 {
+GameState(Game & game) : void
+~GameState() : void
..
{abstract} +operator<<(GameInput msg) = 0 : void
..
#Getbot() : Player &
#Getplayer() : HumanPlayer &
+abilitymanager_from_json(const json & save_file) : AbilityManager
+field_from_json(const json & save_file) : PlayGround
+load(const std::string & file_name) : bool
+save(const std::string & file_name) : bool
+shipmanager_from_json(const json & save_file) : ShipManager
__
#game : Game &
}
class "FileHandler" as C_0002918291441898942593
class C_0002918291441898942593 {
+FileHandler(const std::string & filename) : void
+~FileHandler() : void
..
+close_read() : void
+close_write() : void
+open_for_read() : void
+open_for_write() : void
+read(GameState & current_state) : void
+write(GameState & current_state) : void
__
-filename : const std::string &
-input_file : std::ifstream
-output_file : std::ofstream
}
class "BattleState" as C_0008183552386718209794
class C_0008183552386718209794 {
+BattleState(Game & game) : void
..
+operator<<(GameInput msg) : void
..
+NextRound() : void
+SwitchTurn() : void
__
-current_turn : Turn
}
class "Game" as C_0017470460303031448044
class C_0017470460303031448044 {
+Game() : void
+~Game() : void
..
+ChangeState(GameState * new_state) : void
+IsRunning() : bool
+Play() : void
+Quit() : void
-StartNewGame() : void
__
#bot : Player
#current_state : GameState *
#input : GameInput
-is_running : bool
#player : HumanPlayer
}
enum "BattleState::Turn" as C_0014139181263192131757
enum C_0014139181263192131757 {
BOT
HUMAN
}
class "ShipPlacementState" as C_0016491408947504022071
class C_0016491408947504022071 {
+ShipPlacementState(Game & game) : void
..
+operator<<(GameInput msg) : void
..
+BotShipPlacement() : void
__
}
class "FieldCreatingState" as C_0012851784163152180326
class C_0012851784163152180326 {
+FieldCreatingState(Game & game) : void
..
+operator<<(GameInput msg) : void
__
-size : size_t
}
enum "ShipType" as C_0011957900160697519091
enum C_0011957900160697519091 {
vedette
destroyer
cruiser
battleship
}
class "ShipInitializationState" as C_0011364344354936028514
class C_0011364344354936028514 {
+ShipInitializationState(Game & game) : void
..
+operator<<(GameInput msg) : void
__
-data : ShipData
-ship_counter : size_t
-ship_sizes : std::vector<size_t>
}
C_0004449643540916957189 ..> C_0018418403117949621286
C_0004449643540916957189 ..> C_0003605716991605700936
C_0001603642456660510360 ..> C_0018418403117949621286
C_0007473334849562948175 ..> C_0001603642456660510360
C_0007473334849562948175 ..> C_0003605716991605700936
C_0011220702600279671166 ..> C_0001275076681856179721
C_0011220702600279671166 ..> C_0007473334849562948175
C_0009005584129432802063 ..> C_0018418403117949621286
C_0000030218166798540365 ..> C_0018418403117949621286
C_0006940668744115959276 ..> C_0018418403117949621286
C_0006940668744115959276 ..> C_0003605716991605700936
C_0007031707510986757882 ..> C_0018418403117949621286
C_0007031707510986757882 ..> C_0003605716991605700936
C_0001347152004389415025 ..> C_0001275076681856179721
C_0015276452310838919986 ..> C_0010394947047751168916
C_0010668212532447068380 ..> C_0014529657433315016423
C_0011066545360489158062 ..> C_0011957900160697519091
C_0018289579989347309285 o-- C_0001275076681856179721 : -message
C_0005494508630382109428 o-- C_0001275076681856179721 : -message
C_0016096237383225318716 o-- C_0001275076681856179721 : -message
C_0006488909643758798999 o-- C_0001275076681856179721 : -message
C_0002765608692022154684 o-- C_0001275076681856179721 : -message
C_0006132211642022131397 o-- C_0001275076681856179721 : -message
C_0000648866158297546465 --> C_0003605716991605700936 : -user
C_0018418403117949621286 <|-- C_0000648866158297546465

C_0013402225055324596433 --> C_0003605716991605700936 : -target
C_0013402225055324596433 --> C_0003605716991605700936 : -user
C_0018418403117949621286 <|-- C_0013402225055324596433

C_0011998025940278914008 --> C_0003605716991605700936 : -user
C_0011998025940278914008 --> C_0003605716991605700936 : -target
C_0018418403117949621286 <|-- C_0011998025940278914008

C_0016677220737534910727 ..> C_0001275076681856179721
C_0016677220737534910727 ..> C_0007473334849562948175
C_0016677220737534910727 ..> C_0003605716991605700936
C_0016677220737534910727 ..> C_0001603642456660510360
C_0016677220737534910727 ..> C_0018418403117949621286
C_0016677220737534910727 ..> C_0002165705464363680401
C_0016677220737534910727 o-- C_0011220702600279671166 : -abilityMap
C_0002165705464363680401 --+ C_0016677220737534910727
C_0002165705464363680401 ..> C_0007031707510986757882
C_0002165705464363680401 ..> C_0001275076681856179721
C_0002165705464363680401 o-- C_0004449643540916957189 : -current
C_0002165705464363680401 o-- C_0004449643540916957189 : -end
C_0002235219345516323367 ..> C_0001275076681856179721
C_0002235219345516323367 ..> C_0008843406913308057517
C_0002235219345516323367 o-- C_0001347152004389415025 : -avalaible_abilities
C_0014529657433315016423 ..> C_0009844379697287645638
C_0014529657433315016423 ..> C_0008843406913308057517
C_0014529657433315016423 o-- C_0017330203401231275776 : -coords
C_0014529657433315016423 o-- C_0015200704647938469073 : -orientation
C_0014529657433315016423 o-- C_0012070552035441967676 : -segments
C_0015200704647938469073 --+ C_0014529657433315016423
C_0009844379697287645638 --+ C_0014529657433315016423
C_0006558446222404021839 ..> C_0017330203401231275776
C_0006558446222404021839 ..> C_0014529657433315016423
C_0006558446222404021839 ..> C_0015200704647938469073
C_0006558446222404021839 ..> C_0007786281775014655181
C_0006558446222404021839 ..> C_0008843406913308057517
C_0006558446222404021839 o-- C_0015276452310838919986 : -cells
C_0005246984515395044746 --+ C_0006558446222404021839
C_0005246984515395044746 ..> C_0009844379697287645638
C_0005246984515395044746 ..> C_0008843406913308057517
C_0005246984515395044746 o-- C_0007786281775014655181 : -state
C_0005246984515395044746 --> C_0014529657433315016423 : -ship
C_0005246984515395044746 <.. C_0006558446222404021839 : +<<friend>>
C_0017499122254539489506 ..> C_0009048762651940375792
C_0017499122254539489506 ..> C_0014529657433315016423
C_0017499122254539489506 ..> C_0017330203401231275776
C_0017499122254539489506 ..> C_0008843406913308057517
C_0017499122254539489506 o-- C_0010668212532447068380 : -ships
C_0003605716991605700936 ..> C_0008843406913308057517
C_0003605716991605700936 o-- C_0006558446222404021839 : +Field
C_0003605716991605700936 o-- C_0017499122254539489506 : +SManager
C_0003605716991605700936 o-- C_0017330203401231275776 : +cursor
C_0006734864703741281718 ..> C_0008843406913308057517
C_0006734864703741281718 o-- C_0002235219345516323367 : +AManager
C_0003605716991605700936 <|-- C_0006734864703741281718

C_0004247110065670081973 ..> C_0001275076681856179721
C_0004247110065670081973 ..> C_0016022673017162080147
C_0004247110065670081973 ..> C_0017330203401231275776
C_0004247110065670081973 ..> C_0015200704647938469073
C_0004247110065670081973 o-- C_0011228600242240923690 : #keybinds
C_0004247110065670081973 <.. C_0017470460303031448044 : +<<friend>>
C_0004247110065670081973 <.. C_0008183552386718209794 : +<<friend>>
C_0016022673017162080147 --+ C_0004247110065670081973
C_0004356735495323104445 ..> C_0006734864703741281718
C_0004356735495323104445 ..> C_0003605716991605700936
C_0004356735495323104445 ..> C_0004247110065670081973
C_0004356735495323104445 ..> C_0008843406913308057517
C_0004356735495323104445 ..> C_0017499122254539489506
C_0004356735495323104445 ..> C_0006558446222404021839
C_0004356735495323104445 ..> C_0002235219345516323367
C_0004356735495323104445 ..> C_0001275076681856179721
C_0004356735495323104445 --> C_0017470460303031448044 : #game
C_0002918291441898942593 ..> C_0004356735495323104445
C_0002918291441898942593 --> C_0001275076681856179721 : -filename
C_0002918291441898942593 o-- C_0013346845937494941633 : -input_file
C_0002918291441898942593 o-- C_0004276277466396066764 : -output_file
C_0008183552386718209794 ..> C_0017470460303031448044
C_0008183552386718209794 ..> C_0004247110065670081973
C_0008183552386718209794 o-- C_0014139181263192131757 : -current_turn
C_0004356735495323104445 <|-- C_0008183552386718209794

C_0017470460303031448044 o-- C_0004247110065670081973 : #input
C_0017470460303031448044 o-- C_0003605716991605700936 : #bot
C_0017470460303031448044 o-- C_0006734864703741281718 : #player
C_0017470460303031448044 --> C_0004356735495323104445 : #current_state
C_0017470460303031448044 <.. C_0004356735495323104445 : +<<friend>>
C_0014139181263192131757 --+ C_0008183552386718209794
C_0016491408947504022071 ..> C_0017470460303031448044
C_0016491408947504022071 ..> C_0004247110065670081973
C_0004356735495323104445 <|-- C_0016491408947504022071

C_0012851784163152180326 ..> C_0017470460303031448044
C_0012851784163152180326 ..> C_0004247110065670081973
C_0004356735495323104445 <|-- C_0012851784163152180326

C_0011364344354936028514 ..> C_0017470460303031448044
C_0011364344354936028514 ..> C_0004247110065670081973
C_0011364344354936028514 o-- C_0009048762651940375792 : -ship_sizes
C_0011364344354936028514 o-- C_0011066545360489158062 : -data
C_0004356735495323104445 <|-- C_0011364344354936028514


'Generated with clang-uml, version 0.5.5
'LLVM version Ubuntu clang version 18.1.3 (1ubuntu1)
@enduml
