@startuml
abstract "AbilityInterface" as C_0018418403117949621286
abstract C_0018418403117949621286 {
+~AbilityInterface() = default : void
..
{abstract} +applyAbility() const = 0 : bool
__
}
class "DoubleDamage" as C_0000648866158297546465
class C_0000648866158297546465 {
+DoubleDamage(Player & user) : void
..
+applyAbility() const : bool
{static} +registerAbility() : void
__
-user : Player &
}
class "Scanner" as C_0013402225055324596433
class C_0013402225055324596433 {
+Scanner(Player & user, Player & target) : void
..
+applyAbility() const : bool
{static} +registerAbility() : void
__
-target : Player &
-user : Player &
}
class "RocketBarrage" as C_0011998025940278914008
class C_0011998025940278914008 {
+RocketBarrage(Player & user, Player & target) : void
..
+applyAbility() const : bool
{static} +registerAbility() : void
__
-target : Player &
-user : Player &
}
class "AbilityRegistry" as C_0016677220737534910727
class C_0016677220737534910727 {
-AbilityRegistry() = default : void
..
+begin() : iterator
+createAbility(const std::string & name, Player & user, Player & target) : std::unique_ptr<AbilityInterface>
+end() : iterator
{static} +instance() : AbilityRegistry &
+registerAbility(const std::string & name, AbilityCreator creator) : void
+size() : size_t
__
-abilityMap : Registry
}
class "AbilityRegistry::iterator" as C_0002165705464363680401
class C_0002165705464363680401 {
+operator!=(const iterator & other) const : bool
+operator*() const : reference
+operator+(size_t n) const : iterator
+operator++() : iterator &
+operator->() const : pointer
..
+iterator(std::__detail::_Node_iterator<std::string,AbilityCreator>::iterator start, std::__detail::_Node_iterator<std::string,AbilityCreator>::iterator end) : void
__
-current : std::unordered_map<std::string,AbilityCreator>::iterator
-end : std::unordered_map<std::string,AbilityCreator>::iterator
}
class "AbilityManager" as C_0002235219345516323367
class C_0002235219345516323367 {
+AbilityManager() : void
..
+emptyAbilityQueue() : void
+getAbility(const std::string & ability) : void
+getDoubleDamage() : void
+getRandomAbility() : const std::string
+getRocketBarrage() : void
+getScanner() : void
+pop() : void
+to_json() : json
+top() const : const std::string
__
-avalaible_abilities : std::vector<std::string>
}
class "Player" as C_0003605716991605700936
class C_0003605716991605700936 {
+to_json() : json
__
+Field : PlayGround
+SManager : ShipManager
+cursor : Point
+double_damage_buff : bool
}
C_0000648866158297546465 --> C_0003605716991605700936 : -user
C_0018418403117949621286 <|-- C_0000648866158297546465

C_0013402225055324596433 --> C_0003605716991605700936 : -target
C_0013402225055324596433 --> C_0003605716991605700936 : -user
C_0018418403117949621286 <|-- C_0013402225055324596433

C_0011998025940278914008 --> C_0003605716991605700936 : -user
C_0011998025940278914008 --> C_0003605716991605700936 : -target
C_0018418403117949621286 <|-- C_0011998025940278914008

C_0016677220737534910727 ..> C_0018418403117949621286
C_0016677220737534910727 ..> C_0002165705464363680401
C_0016677220737534910727 ..> C_0018418403117949621286 : -abilityMap
C_0016677220737534910727 --> C_0003605716991605700936 : -abilityMap
C_0002165705464363680401 --+ C_0016677220737534910727
C_0002165705464363680401 ..> C_0018418403117949621286 : -current
C_0002165705464363680401 ..> C_0003605716991605700936 : -current
C_0002165705464363680401 ..> C_0018418403117949621286 : -end
C_0002165705464363680401 ..> C_0003605716991605700936 : -end

'Generated with clang-uml, version 0.5.6
'LLVM version Ubuntu clang version 18.1.3 (1ubuntu1)
@enduml
